install.packages("tidyverse")
install.packages("shinydashboard")
install.packages("shinydashboard")
clear
install.packages("shiny")
## app.R ##
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
## app.R ##
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
dashboardSidebar(),
dashboardBody(
# Boxes need to be put in a row (or column)
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
## app.R ##
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
dashboardSidebar(),
dashboardBody(
# Boxes need to be put in a row (or column)
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
help(seq_len)
## app.R ##
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
## Sidebar content
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", tabName = "widgets", icon = icon("th"))
)
),
dashboardBody(
# Boxes need to be put in a row (or column)
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
y <- ts(c(123,39,78,52,110), start=2012)
View(y)
y <- ts(c(123,39,78,52,110), start=2015)
View(y)
??random
?random
??random
??random
z <- mvnorm(n=12, 10, 1)
z <- mvrnorm(n=12, 10, 1)
z <- mvrnorm(n=12, 10, 1)
z <- mvrnorm(12, 10, 1)
install.packages("MASS")
z <- mvrnorm(12, 10, 1)
install.packages("mvrnorm")
clear
z <- mvrnorm(12, 10, 1)
z <- mvrnorm(12, 10)
z <- c(100,200,300,400,500,600,700,800,900,100,1100,13000)
y2 <- ts(z, start=2010, frequency = 12)
rm(list=ls())
autoplot(melsyd[,"Economy.Class"]) +
ggtitle("Economy class passengers: Melbourne-Sydney") +
xlab("Year") +
ylab("Thousands")
data(melsyd)
install.packages("fpp")
autoplot(melsyd[,"Economy.Class"]) +
ggtitle("Economy class passengers: Melbourne-Sydney") +
xlab("Year") +
ylab("Thousands")
data(melsyd)
library(fpp)
autoplot(melsyd[,"Economy.Class"]) +
ggtitle("Economy class passengers: Melbourne-Sydney") +
xlab("Year") +
ylab("Thousands")
library(fpp)
library(tidyverse)
autoplot(melsyd[,"Economy.Class"]) +
ggtitle("Economy class passengers: Melbourne-Sydney") +
xlab("Year") +
ylab("Thousands")
?autoplot
library(fpp)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(fpp)
library(tidyverse)
autoplot(melsyd[,"Economy.Class"])
ggtitle("Economy class passengers: Melbourne-Sydney") +
xlab("Year") +
ylab("Thousands")
autoplot(melsyd[,"Economy.Class"])
autoplot(melsyd[,"Economy.Class"]) +
ggtitle("Economy class passengers: Melbourne-Sydney") +
xlab("Year") +
ylab("Thousands")
melsyd
melsyd[Economy.class]
melsyd["Economy.class"]
melsyd
melsyd[, "Economy.Class"]
melsyd[, Economy.Class]
"
melsyd[, "Economy.Class"]
melsyd[, "Economy.Class"]
autoplot(a10) +
ggtitle("Antidiabetic drug sales") +
ylab("$ million") +
xlab("Year")
install.package("tidycensus")
install.packages("tidycensus")
library(tidyverse)
library(tidycensus)
install.packages(c("boot", "broom", "callr", "digest", "dplyr", "forecast", "foreign", "jsonlite", "knitr", "lattice", "mime", "nlme", "prettyunits", "processx", "ps", "RcppArmadillo", "rlang", "rstudioapi", "stringi", "tidyr", "tidyselect", "vctrs", "yaml"))
install.packages(c("boot", "broom", "callr", "digest", "dplyr", "forecast", "foreign", "jsonlite", "knitr", "lattice", "mime", "nlme", "prettyunits", "processx", "ps", "RcppArmadillo", "rlang", "rstudioapi", "stringi", "tidyr", "tidyselect", "vctrs", "yaml"))
install.packages(c("boot", "broom", "callr", "digest", "dplyr", "forecast", "foreign", "jsonlite", "knitr", "lattice", "mime", "nlme", "prettyunits", "processx", "ps", "RcppArmadillo", "rlang", "rstudioapi", "stringi", "tidyr", "tidyselect", "vctrs", "yaml"))
install.packages(c("boot", "broom", "callr", "digest", "dplyr", "forecast", "foreign", "jsonlite", "knitr", "lattice", "mime", "nlme", "prettyunits", "processx", "ps", "RcppArmadillo", "rlang", "rstudioapi", "stringi", "tidyr", "tidyselect", "vctrs", "yaml"))
install.packages(c("boot", "broom", "callr", "digest", "dplyr", "forecast", "foreign", "jsonlite", "knitr", "lattice", "mime", "nlme", "prettyunits", "processx", "ps", "RcppArmadillo", "rlang", "rstudioapi", "stringi", "tidyr", "tidyselect", "vctrs", "yaml"))
install.packages(c("boot", "callr", "dplyr", "forecast", "knitr", "rlang", "tidyr", "tidyselect"))
install.packages(c("broom", "digest", "foreign", "jsonlite", "lattice", "mime", "nlme", "prettyunits", "processx", "ps", "RcppArmadillo", "rstudioapi", "stringi", "yaml"))
install.packages(c("broom", "digest", "foreign", "jsonlite", "lattice", "mime", "nlme", "prettyunits", "processx", "ps", "RcppArmadillo", "rstudioapi", "stringi", "yaml"))
install.packages("rstudioapi")
install.packages("rstudioapi")
install.packages(c("broom", "digest", "foreign", "jsonlite", "lattice", "mime", "nlme", "prettyunits", "processx", "ps", "RcppArmadillo", "stringi", "yaml"))
install.packages("rstudioapi")
install.packages("rstudioapi")
install.packages('devtools', repos = 'http://cran.us.r-project.org')
clear
devtools::install_github("hadley/devtools")
devtools::install_github("hadley/devtools")
install.packages("devtools")
install.packages('devtools', repos = 'http://cran.us.r-project.org')
devtools::install_github('xuyiqing/gsynth')
remove.packages("gsynth")
source('~/Documents/career/RKG/code/ACS-Data-Pull/main.r', echo=TRUE)
get_data()
getd
getwd()
dirname(rstudioapi::getActiveDocumentContext()$path)
dirname(rstudioapi::getActiveDocumentContext()$path)
dirname(rstudioapi::getActiveDocumentContext()$path)
dirname(rstudioapi::getActiveDocumentContext()$path)
source('~/Documents/career/RKG/code/ACS-Data-Pull/main.r', echo=TRUE)
library(tidyverse)
library(tidycensus)
census_api_key("2f7688b42a2c229e0662079bf0f4f5400cbb7551") # YOU NEED YOUR OWN
load_variables(2018,"acs5",cache=TRUE)
View(load_variables(2018,"acs5",cache=TRUE))
source('~/Documents/school/econometrics/empirical paper/metrics_paper.R', echo=TRUE)
df <- get_acs(geography="metropolitan statistical area",
state="MA",
table = "B01001",
survey = "acs5"
)
df <- get_acs(geography="metropolitan statistical area/micropolitan statistical area",
state="MA",
table = "B01001",
survey = "acs5"
)
library(tidyverse)
library(tidycensus)
census_api_key("2f7688b42a2c229e0662079bf0f4f5400cbb7551") # YOU NEED YOUR OWN
View(load_variables(2018,"acs5",cache=TRUE))
df <- get_acs(geography="metropolitan statistical area/micropolitan statistical area",
state="MA",
table = "B01001",
survey = "acs5"
)
df <- get_acs(geography="metropolitan statistical area/micropolitan statistical area",
state="MA",
table = "B01003",
survey = "acs5"
)
library(tidyverse)
library(tidycensus)
census_api_key("2f7688b42a2c229e0662079bf0f4f5400cbb7551") # YOU NEED YOUR OWN
View(load_variables(2018,"acs5",cache=TRUE))
df <- get_acs(geography="combined statistical area",
state="MA",
table = "B01003",
survey = "acs5"
)
df <- get_acs(geography="combined statistical area",
state="MA",
table = "B01003",
year = 2018,
survey = "acs5"
)
df <- get_acs(geography="combined statistical area",
state="MA",
table = "B01003",
year = 2018,
survey = "acs1"
)
df <- get_acs(geography="place",
state="MA",
table = "B01003",
year = 2018,
survey = "acs1"
)
df <- get_acs(geography="block group",
state="MA",
table = "B01003",
year = 2018,
survey = "acs1"
)
View(load_variables(2018,"acs5",cache=TRUE))
df <- get_acs(geography="block group",
state="MA",
table = "B01001",
year = 2018,
survey = "acs1"
)
df <- get_acs(geography="metropolitan statistical area/micropolitan statistical area",
state="MA",
table = "B01001",
year = 2018,
survey = "acs1"
)
df <- get_acs(geography="metropolitan statistical area/micropolitan statistical area",
state="MA",
table = "B01001",
year = 2018,
survey = "acs5"
)
df <- get_acs(geography="metropolitan statistical area/micropolitan statistical area",
state="MA",
# table = "B01001",
year = 2018,
survey = "acs5"
)
df <- get_acs(geography="metropolitan statistical area/micropolitan statistical area",
state="MA",
table = "B01001",
year = 2018,
survey = "acs5"
)
df <- get_acs(geography="metropolitan statistical area/micropolitan statistical area",
# state="MA",
table = "B01001",
year = 2018,
survey = "acs5"
)
View(df)
df <- get_acs(geography="new england city and town area",
# state="MA",
table = "B01001",
year = 2018,
survey = "acs5"
)
View(df)
df <- get_acs(geography="county",
state="MA",
table = "B01001",
year = 2018,
survey = "acs5"
)
library(tidyverse)
library(tidycensus)
census_api_key("2f7688b42a2c229e0662079bf0f4f5400cbb7551") # YOU NEED YOUR OWN
View(load_variables(2018,"acs5",cache=TRUE))
df_mass <- get_acs(geography="tract",
state="MA",
table = "B01001",
year = 2018,
survey = "acs5"
)
df_mass <- get_acs(geography="tract",
state="MA",
table = "B01001",
year = 2018,
survey = "acs5",
cache_table = TRUE
)
df_nh <- get_acs(geography="tract",
state="NH",
table = "B01001",
year = 2018,
survey = "acs5",
cache_table = TRUE
)
View(df_mass)
View(df_nh)
source('~/Documents/career/RKG/code/ACS-Data-Pull/main.r', echo=TRUE)
get_data()
source('~/Documents/career/RKG/code/ACS-Data-Pull/main.r', echo=TRUE)
data_collect()
source('~/Documents/career/RKG/code/ACS-Data-Pull/main.r', echo=TRUE)
data_collect()
setwd(getSrcDirectory()[1])
install.packages("utils")
install.packages("utils")
install.packages("utils")
utils
setwd(getSrcDirectory()[1])
source('~/Documents/career/RKG/code/ACS-Data-Pull/main.r', echo=TRUE)
data_collect()
source('~/Documents/career/RKG/code/ACS-Data-Pull/main.r', echo=TRUE)
data_collect()
source('~/Documents/career/RKG/code/ACS-Data-Pull/main.r', echo=TRUE)
data_collect()
library(tidyverse)
library(tidycensus)
?get_acs
library(tidyverse)
library(tidycensus)
unem <- get_acs(geo_level = "county",
state = "GA",
county = "Fulton County",
table = "S2301",
year = 2018,
survey = "acs5"
)
library(tidyverse)
library(tidycensus)
census_api_key("2f7688b42a2c229e0662079bf0f4f5400cbb7551") # YOU NEED YOUR OWN
unem <- get_acs(geo_level = "county",
state = "GA",
county = "Fulton County",
table = "S2301",
year = 2018,
survey = "acs5",
cache_table = TRUE
)
unem <- get_acs(geography = "county",
state = "GA",
county = "Fulton County",
table = "S2301",
year = 2018,
survey = "acs5",
cache_table = TRUE
)
?get_acs
unem <- get_acs(geography = "block group",
state = "GA",
county = "Fulton County",
table = "S2301",
year = 2018,
survey = "acs5",
cache_table = TRUE
)
unem <- get_acs(geography = "block group",
state = "GA",
county = "Fulton County",
table = "S2301",
year = 2018,
survey = "acs5",
cache_table = TRUE
)
unem <- get_acs(geography = "block group",
state = "GA",
# county = "Fulton County",
table = "S2301",
year = 2018,
survey = "acs5",
cache_table = TRUE
)
unem <- get_acs(geography = "block group",
state = "GA",
table = "S2301",
year = 2018,
survey = "acs5",
cache_table = TRUE
)
unem <- get_acs(geography = "county",
state = "GA",
table = "S2301",
year = 2018,
survey = "acs5",
cache_table = TRUE
)
unem <- get_acs(geography = "county",
state = "GA",
county = "Fulton County"
table = "S2301",
year = 2018,
survey = "acs5",
cache_table = TRUE
)
unem <- get_acs(geography = "county",
state = "GA",
county = "Fulton County",
table = "S2301",
year = 2018,
survey = "acs5",
cache_table = TRUE
)
View(unem)
source('~/Downloads/ryan.R', echo=TRUE)
pov <- get_acs(geography = "block group",
state = "GA",
county = "Fulton County",
table = "S1701",
year = 2013,
survey = "acs5",
cache_table = TRUE
)
View(vac)
View(vac)
# install.packages(
#   "tidyverse",
#   "tidycensus",
#   "readxl",
#   "openxlsx"
# )
# After you have run the code above, please either delete the code
# or comment out the code using Ctrl-Shift-C
rm(list=ls())
library(tidyverse)
library(tidycensus)
library(readxl)
library(openxlsx)
source("funcs.r")
source("call.r")
# %%%%%%%%%%%% BEGIN MESSING WITH THIS %%%%%%%%%%%%
setwd("~/Documents/work/RKG/code/ACS-Data-Pull")
census_api_key("2f7688b42a2c229e0662079bf0f4f5400cbb7551") # YOU NEED YOUR OWN
# Parameters/FILEPATHS ----
data_path <- "~/Documents/work/RKG/data"    # This is the path where "read_file" lives
read_file <- "Data Pull_NashuaNH.xlsx"     # This is the file that contains codes for all tables you want to pull
var_sheet <- "Data Pull"     # This specifies the sheet in "read_file" that contains the information mentioned above
# inputs ----
acs_years <-c(2013,2018)   # Please pick 2 separate years
st <- "NH"     # state
geo_level <- "county subdivision"  # geographic level. search "tidycensus" online to see different options
cnty <- "Hillsborough County"   # County
survey_type <- "acs5"   # 5-year ACS, 1-year ACS, etc...
cnty_name <- str_replace(cnty," ","_") # Please do not touch this.
name <- "Nashua city"
# ******** IMPORTANT PLEASE READ **********
# CHOOSE st, cnty_name, or insert the name of a custom place you're trying to
# If you do NOT use 'cnty_name', you MUST input the name exactly, CASE SENSITIVE, as it appears
# in the data pulled from the acs
# %%%%%%%%%%% STOP MESSING WITH THIS %%%%%%%%%%%%%%%
# labels ----
labels <- read_excel(paste(data_path,read_file,sep="/"),sheet=var_sheet)
labels <- filter(labels, Source=="ACS Data")
tables <- labels[2]
# wb setup ----
wb <- loadWorkbook(paste(data_path,read_file,sep="/"))
# wb <- createWorkbook()
# save ----
write_file <- paste(name,st,"Data.xlsx",sep="_")
write_file <- paste(data_path,write_file,sep="/")
print(write_file)
saveWorkbook(wb,write_file,overwrite = T)
print(write_file)
source('~/Documents/work/RKG/code/ACS-Data-Pull/get_data.R', echo=TRUE)
source('~/Documents/work/RKG/code/ACS-Data-Pull/get_data.R', echo=TRUE)
